#How did viewing a diff between two versions of a file help you see the bug that was introduced?

*There was a smaller amount of code to look through
*It was easy to see what changed with the + and - structure

#How did having easy access to the entire history of a file make you a more efficient programmer in the long term?

*You can easily see when certain changes were made
*Can easily correct mistakes if you know when the file was edited
*Can revert the file back to a time when there was not a mistake

#What do you think are the pros and cons of manually choosing when to create a commit, like you do in Git, vs 
#having versions automatically saved, like Google Docs does?

*Pros
*user-chosen commit, more likely to have a purpose
*more likely to be correctly sized commit

*Cons
*based on user judgement, can make a bad judgement call on the size of the commit

#Why do you think some version control systems, like Git, allow saving multiple files in one 
#commit, while others, like Google Docs, treat each file separately?

*Git is more tailored to programmers and version control for code
*many of these commits will involve multiple files, so it allows saving multiple files in one commit
*Google Docs doesn't allow this, as you are generally not editting multiple files at the same time

#How can you use the commands git log and git diff to view the history of files?

*use git log to see when changes were made
*check for pluses and minuses in the logs
*then choose the two commits you would like to view 
*use git --diff and compare the two commits' history and any changes made between them

#How might using version control make you more confident to make changes that could break something?

*you would know that you can easily revert to an earlier version of your code before it was broken
*can use git diff to see what was changed and how to fix the bug that was introduced

#Now that you have your workspace set up, what do you want to try using Git for?

*I'd like to use Git for version control on all of my future projects
*To better understand best practices for programming and to become a better programmer